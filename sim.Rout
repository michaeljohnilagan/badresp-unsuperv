
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # required packages and helper functions
> library("furrr")
Loading required package: future
Warning messages:
1: package 'furrr' was built under R version 4.0.5 
2: package 'future' was built under R version 4.0.5 
> library("future")
> source("helper-general.R")
> source("helper-unsuperv.R")
> 
> # function: sample from data
> samplerows = function(n,data) {
+ 	sampindex = sample(1:nrow(data),size=n,replace=TRUE) # with replacement
+ 	return(as.matrix(data[sampindex,,drop=FALSE]))
+ }
> 
> # simulation study constants
> numrepl = 500 # number of replicates per cell
> humandata = with(new.env(),{
+ 	datoriginal = read.csv("./data.csv",header=TRUE)[,1:32] # load data
+ 	humandata = replace(datoriginal,datoriginal==-1,NA) # code missing
+ 	rowsallmissing = apply(humandata,1,function(v) {
+ 		all(is.na(v))
+ 	}) # rows that are all missing
+ 	humandata[!rowsallmissing,]
+ }) # human data
> pointscale = 5 # number of likert categories
> nri = c("mahal","ptc") # NRIs
> numbotseach = 200 # number of synthetic rows per observed
> 
> # simulation study factors
> simfactors = list(n=c(100,300,900),contam=c(0.05,0.25,0.5,0.75,0.95),
+ botdist=c("unif","binom"),method=c("00","01","10","11"),
+ columnsused=c("all","even"))
> 
> # spell out botdist and columnsused
> botdistinfo = list(unif=rep(1,times=pointscale),
+ binom=dbinom(0:(pointscale-1),size=pointscale-1,prob=0.5))
> columnsusedinfo = list(all=rep(TRUE,ncol(humandata)),
+ even=(1:ncol(humandata)%%2)==0)
> 
> # function: run simulation replicate
> runsimrepl = function(humandata,pointscale,nri,numbotseach,n,contam,
+ botdist,method,columnsused) {
+ 	# sample sizes
+ 	n0 = round(n*(1-contam))
+ 	n1 = n-n0
+ 	# generate test data likert
+ 	humandataused = humandata[,columnsusedinfo[[columnsused]]]
+ 	zte0 = samplerows(n0,data=humandataused) # human part
+ 	zte1 = rbot(n1,pointscale=pointscale,numitems=ncol(humandataused),
+ 	prob=botdistinfo[[botdist]]) # bot part
+ 	zte = rbind(zte0,zte1) # all respondents
+ 	yte = c(rep("human",n0),rep("bot",n1)) # true labels
+ 	# choose approach
+ 	if(method=="00") {
+ 		L1 = FALSE
+ 		P1 = FALSE
+ 	} else if(method=="01") {
+ 		L1 = FALSE
+ 		P1 = TRUE
+ 	} else if(method=="10") {
+ 		L1 = TRUE
+ 		P1 = FALSE
+ 	} else if(method=="11") {
+ 		L1 = TRUE
+ 		P1 = TRUE
+ 	} else {
+ 		stop("method not implemented")
+ 	}
+ 	# detection
+ 	detection = detectbots(zte,L1=L1,P1=P1,nri=nri,numbotseach=numbotseach,
+ 	pointscale=pointscale,prob=NULL) # uniform synthetic for P0
+ 	pval = detection$pval
+ 	nri_obs = detection$nri_obs
+ 	nri_synth = detection$nri_synth
+ 	familyid = detection$familyid
+ 	# get binary prediction
+ 	yhat = ifelse(pval<0.05,"spare","kill")
+ 	# evaluate
+ 	met = perfmet(y=yte,yhat=yhat)
+ 	# put together
+ 	return(list(method=method,zte0=zte0,zte1=zte1,yte=yte,
+ 	pval=pval,nri_obs=nri_obs,nri_synth=nri_synth,familyid=familyid,
+ 	yhat=yhat,met=met))
+ }
> 
> # function: run simulation cell
> runsimcell = function(numrepl,humandata,pointscale,nri,numbotseach,n,contam,
+ botdist,method,columnsused) {
+ 	# scenario information
+ 	scenario = data.frame(n=n,contam=contam,botdist=botdist,
+ 	method=method,columnsused=columnsused)
+ 	# do many replicates
+ 	runsimreplthiscell = function(seed) {
+ 		set.seed(seed)
+ 		resu = runsimrepl(humandata=humandata,pointscale=pointscale,
+ 		nri=nri,numbotseach=numbotseach,n=n,contam=contam,
+ 		botdist=botdist,method=method,columnsused=columnsused)
+ 		resu$met$outcomemeasures
+ 	}
+ 	manyreplicates = furrr::future_map(1908+1:numrepl,runsimreplthiscell,
+ 	.progress=FALSE,.options=furrr::furrr_options(seed=NULL))
+ 	# put together
+ 	simplified = as.data.frame(do.call(rbind,manyreplicates))
+ 	together = cbind(scenario,simplified)
+ 	return(together)
+ }
> 
> # function: summarize cell
> summarizecell = function(tab) {
+ 	# get scenario
+ 	paramnames = names(simfactors)
+ 	scenario = tab[1,paramnames]
+ 	# get outcome measures summary
+ 	metricindices = setdiff(colnames(tab),paramnames)
+ 	outcomemeasures = colMeans(tab[,metricindices])
+ 	return(as.data.frame(c(scenario,outcomemeasures)))
+ }
> 
> # try single replicate
> with(new.env(),{
+ 	set.seed(1910)
+ 	foo = runsimrepl(humandata=humandata,pointscale=5,nri=c("mahal","ptc"),
+ 	numbotseach=200,n=100,contam=0.95,botdist="binom",method="11",
+ 	columnsused="even") # execute
+ 	if(!TRUE) {
+ 		with(foo,{
+ 			nriplot(xte=nri_obs,
+ 			xtr=nri_synth[sample(1:nrow(nri_synth),size=1e3),],
+ 			yhat=yhat,yte=yte,trplotlim=TRUE)
+ 		}) # NRI vs NRI plot
+ 	}
+ 	foo$met # confusion table and outcome measures
+ })
$confusion
       yhat
y       kill spare
  bot     90     5
  human    3     2

$outcomemeasures
      acc      spec      sens       ppv       npv  killrate 
0.9200000 0.4000000 0.9473684 0.9677419 0.2857143 0.9300000 

> 
> # parallel processing
> future::plan(future::multisession)
> 
> # simulation results
> simresu = array(list(),dim=sapply(simfactors,length))
> for(i1 in 1:length(simfactors$n)) for(i2 in 1:length(simfactors$contam)) 
+ for(i3 in 1:length(simfactors$botdist)) 
+ for(i4 in 1:length(simfactors$method)) 
+ for(i5 in 1:length(simfactors$columnsused)) {
+ 	# report scenario
+ 	with(simfactors,{
+ 		message(paste(Sys.time(),"|",n[i1],contam[i2],botdist[i3],
+ 		method[i4],columnsused[i5],sep=" "))
+ 	})
+ 	# work
+ 	simresu[[i1,i2,i3,i4,i5]] = with(simfactors,{
+ 		runsimcell(numrepl=numrepl,humandata=humandata,
+ 		pointscale=pointscale,nri=nri,numbotseach=numbotseach,
+ 		n=n[i1],contam=contam[i2],botdist=botdist[i3],
+ 		method=method[i4],columnsused=columnsused[i5])
+ 	})
+ }; Sys.time()
2023-04-08 03:48:45 | 100 0.05 unif 00 all
2023-04-08 03:49:27 | 100 0.05 unif 00 even
2023-04-08 03:50:03 | 100 0.05 unif 01 all
2023-04-08 03:50:54 | 100 0.05 unif 01 even
2023-04-08 03:51:40 | 100 0.05 unif 10 all
2023-04-08 03:52:27 | 100 0.05 unif 10 even
2023-04-08 03:53:09 | 100 0.05 unif 11 all
2023-04-08 03:53:56 | 100 0.05 unif 11 even
2023-04-08 03:54:40 | 100 0.05 binom 00 all
2023-04-08 03:55:21 | 100 0.05 binom 00 even
2023-04-08 03:55:59 | 100 0.05 binom 01 all
2023-04-08 03:56:49 | 100 0.05 binom 01 even
2023-04-08 03:57:35 | 100 0.05 binom 10 all
2023-04-08 03:58:21 | 100 0.05 binom 10 even
2023-04-08 03:59:03 | 100 0.05 binom 11 all
2023-04-08 03:59:51 | 100 0.05 binom 11 even
2023-04-08 04:00:35 | 100 0.25 unif 00 all
2023-04-08 04:01:16 | 100 0.25 unif 00 even
2023-04-08 04:01:54 | 100 0.25 unif 01 all
2023-04-08 04:02:46 | 100 0.25 unif 01 even
2023-04-08 04:03:32 | 100 0.25 unif 10 all
2023-04-08 04:04:18 | 100 0.25 unif 10 even
2023-04-08 04:05:01 | 100 0.25 unif 11 all
2023-04-08 04:05:50 | 100 0.25 unif 11 even
2023-04-08 04:06:34 | 100 0.25 binom 00 all
2023-04-08 04:07:15 | 100 0.25 binom 00 even
2023-04-08 04:07:52 | 100 0.25 binom 01 all
2023-04-08 04:08:42 | 100 0.25 binom 01 even
2023-04-08 04:09:28 | 100 0.25 binom 10 all
2023-04-08 04:10:14 | 100 0.25 binom 10 even
2023-04-08 04:10:57 | 100 0.25 binom 11 all
2023-04-08 04:11:44 | 100 0.25 binom 11 even
2023-04-08 04:12:28 | 100 0.5 unif 00 all
2023-04-08 04:13:09 | 100 0.5 unif 00 even
2023-04-08 04:13:46 | 100 0.5 unif 01 all
2023-04-08 04:14:36 | 100 0.5 unif 01 even
2023-04-08 04:15:22 | 100 0.5 unif 10 all
2023-04-08 04:16:08 | 100 0.5 unif 10 even
2023-04-08 04:16:50 | 100 0.5 unif 11 all
2023-04-08 04:17:40 | 100 0.5 unif 11 even
2023-04-08 04:18:24 | 100 0.5 binom 00 all
2023-04-08 04:19:05 | 100 0.5 binom 00 even
2023-04-08 04:19:42 | 100 0.5 binom 01 all
2023-04-08 04:20:32 | 100 0.5 binom 01 even
2023-04-08 04:21:18 | 100 0.5 binom 10 all
2023-04-08 04:22:04 | 100 0.5 binom 10 even
2023-04-08 04:22:46 | 100 0.5 binom 11 all
2023-04-08 04:23:33 | 100 0.5 binom 11 even
2023-04-08 04:24:16 | 100 0.75 unif 00 all
2023-04-08 04:24:57 | 100 0.75 unif 00 even
2023-04-08 04:25:34 | 100 0.75 unif 01 all
2023-04-08 04:26:25 | 100 0.75 unif 01 even
2023-04-08 04:27:10 | 100 0.75 unif 10 all
2023-04-08 04:27:56 | 100 0.75 unif 10 even
2023-04-08 04:28:38 | 100 0.75 unif 11 all
2023-04-08 04:29:25 | 100 0.75 unif 11 even
2023-04-08 04:30:08 | 100 0.75 binom 00 all
2023-04-08 04:30:50 | 100 0.75 binom 00 even
2023-04-08 04:31:27 | 100 0.75 binom 01 all
2023-04-08 04:32:20 | 100 0.75 binom 01 even
2023-04-08 04:33:05 | 100 0.75 binom 10 all
2023-04-08 04:33:51 | 100 0.75 binom 10 even
2023-04-08 04:34:33 | 100 0.75 binom 11 all
2023-04-08 04:35:20 | 100 0.75 binom 11 even
2023-04-08 04:36:03 | 100 0.95 unif 00 all
2023-04-08 04:36:44 | 100 0.95 unif 00 even
2023-04-08 04:37:21 | 100 0.95 unif 01 all
2023-04-08 04:38:12 | 100 0.95 unif 01 even
2023-04-08 04:38:57 | 100 0.95 unif 10 all
2023-04-08 04:39:43 | 100 0.95 unif 10 even
2023-04-08 04:40:25 | 100 0.95 unif 11 all
2023-04-08 04:41:12 | 100 0.95 unif 11 even
2023-04-08 04:41:55 | 100 0.95 binom 00 all
2023-04-08 04:42:37 | 100 0.95 binom 00 even
2023-04-08 04:43:14 | 100 0.95 binom 01 all
2023-04-08 04:44:03 | 100 0.95 binom 01 even
2023-04-08 04:44:49 | 100 0.95 binom 10 all
2023-04-08 04:45:35 | 100 0.95 binom 10 even
2023-04-08 04:46:17 | 100 0.95 binom 11 all
2023-04-08 04:47:07 | 100 0.95 binom 11 even
2023-04-08 04:47:50 | 300 0.05 unif 00 all
2023-04-08 04:49:54 | 300 0.05 unif 00 even
2023-04-08 04:51:45 | 300 0.05 unif 01 all
2023-04-08 04:54:19 | 300 0.05 unif 01 even
2023-04-08 04:56:46 | 300 0.05 unif 10 all
2023-04-08 04:59:07 | 300 0.05 unif 10 even
2023-04-08 05:01:15 | 300 0.05 unif 11 all
2023-04-08 05:03:43 | 300 0.05 unif 11 even
2023-04-08 05:05:56 | 300 0.05 binom 00 all
2023-04-08 05:08:00 | 300 0.05 binom 00 even
2023-04-08 05:09:51 | 300 0.05 binom 01 all
2023-04-08 05:12:25 | 300 0.05 binom 01 even
2023-04-08 05:14:52 | 300 0.05 binom 10 all
2023-04-08 05:17:17 | 300 0.05 binom 10 even
2023-04-08 05:19:24 | 300 0.05 binom 11 all
2023-04-08 05:21:48 | 300 0.05 binom 11 even
2023-04-08 05:24:00 | 300 0.25 unif 00 all
2023-04-08 05:26:04 | 300 0.25 unif 00 even
2023-04-08 05:27:55 | 300 0.25 unif 01 all
2023-04-08 05:30:29 | 300 0.25 unif 01 even
2023-04-08 05:32:57 | 300 0.25 unif 10 all
2023-04-08 05:35:19 | 300 0.25 unif 10 even
2023-04-08 05:37:26 | 300 0.25 unif 11 all
2023-04-08 05:39:51 | 300 0.25 unif 11 even
2023-04-08 05:42:02 | 300 0.25 binom 00 all
2023-04-08 05:44:06 | 300 0.25 binom 00 even
2023-04-08 05:45:56 | 300 0.25 binom 01 all
2023-04-08 05:48:34 | 300 0.25 binom 01 even
2023-04-08 05:50:59 | 300 0.25 binom 10 all
2023-04-08 05:53:22 | 300 0.25 binom 10 even
2023-04-08 05:55:29 | 300 0.25 binom 11 all
2023-04-08 05:57:54 | 300 0.25 binom 11 even
2023-04-08 06:00:05 | 300 0.5 unif 00 all
2023-04-08 06:02:12 | 300 0.5 unif 00 even
2023-04-08 06:04:03 | 300 0.5 unif 01 all
2023-04-08 06:06:38 | 300 0.5 unif 01 even
2023-04-08 06:09:01 | 300 0.5 unif 10 all
2023-04-08 06:11:22 | 300 0.5 unif 10 even
2023-04-08 06:13:30 | 300 0.5 unif 11 all
2023-04-08 06:15:54 | 300 0.5 unif 11 even
2023-04-08 06:18:08 | 300 0.5 binom 00 all
2023-04-08 06:20:11 | 300 0.5 binom 00 even
2023-04-08 06:22:01 | 300 0.5 binom 01 all
2023-04-08 06:24:35 | 300 0.5 binom 01 even
2023-04-08 06:26:58 | 300 0.5 binom 10 all
2023-04-08 06:29:20 | 300 0.5 binom 10 even
2023-04-08 06:31:28 | 300 0.5 binom 11 all
2023-04-08 06:33:55 | 300 0.5 binom 11 even
2023-04-08 06:36:05 | 300 0.75 unif 00 all
2023-04-08 06:38:08 | 300 0.75 unif 00 even
2023-04-08 06:39:58 | 300 0.75 unif 01 all
2023-04-08 06:42:32 | 300 0.75 unif 01 even
2023-04-08 06:44:54 | 300 0.75 unif 10 all
2023-04-08 06:47:19 | 300 0.75 unif 10 even
2023-04-08 06:49:26 | 300 0.75 unif 11 all
2023-04-08 06:51:50 | 300 0.75 unif 11 even
2023-04-08 06:53:59 | 300 0.75 binom 00 all
2023-04-08 06:56:03 | 300 0.75 binom 00 even
2023-04-08 06:57:54 | 300 0.75 binom 01 all
2023-04-08 07:00:25 | 300 0.75 binom 01 even
2023-04-08 07:02:50 | 300 0.75 binom 10 all
2023-04-08 07:05:12 | 300 0.75 binom 10 even
2023-04-08 07:07:19 | 300 0.75 binom 11 all
2023-04-08 07:09:43 | 300 0.75 binom 11 even
2023-04-08 07:11:52 | 300 0.95 unif 00 all
2023-04-08 07:13:56 | 300 0.95 unif 00 even
2023-04-08 07:15:46 | 300 0.95 unif 01 all
2023-04-08 07:18:23 | 300 0.95 unif 01 even
2023-04-08 07:20:45 | 300 0.95 unif 10 all
2023-04-08 07:23:07 | 300 0.95 unif 10 even
2023-04-08 07:25:13 | 300 0.95 unif 11 all
2023-04-08 07:27:37 | 300 0.95 unif 11 even
2023-04-08 07:29:47 | 300 0.95 binom 00 all
2023-04-08 07:31:51 | 300 0.95 binom 00 even
2023-04-08 07:33:43 | 300 0.95 binom 01 all
2023-04-08 07:36:17 | 300 0.95 binom 01 even
2023-04-08 07:38:38 | 300 0.95 binom 10 all
2023-04-08 07:41:00 | 300 0.95 binom 10 even
2023-04-08 07:43:07 | 300 0.95 binom 11 all
2023-04-08 07:45:31 | 300 0.95 binom 11 even
2023-04-08 07:47:43 | 900 0.05 unif 00 all
2023-04-08 07:54:00 | 900 0.05 unif 00 even
2023-04-08 07:59:41 | 900 0.05 unif 01 all
2023-04-08 08:07:27 | 900 0.05 unif 01 even
2023-04-08 08:14:29 | 900 0.05 unif 10 all
2023-04-08 08:22:17 | 900 0.05 unif 10 even
2023-04-08 08:28:47 | 900 0.05 unif 11 all
2023-04-08 08:36:41 | 900 0.05 unif 11 even
2023-04-08 08:43:26 | 900 0.05 binom 00 all
2023-04-08 08:49:39 | 900 0.05 binom 00 even
2023-04-08 08:55:05 | 900 0.05 binom 01 all
2023-04-08 09:02:47 | 900 0.05 binom 01 even
2023-04-08 09:09:58 | 900 0.05 binom 10 all
2023-04-08 09:17:46 | 900 0.05 binom 10 even
2023-04-08 09:24:16 | 900 0.05 binom 11 all
2023-04-08 09:32:11 | 900 0.05 binom 11 even
2023-04-08 09:38:57 | 900 0.25 unif 00 all
2023-04-08 09:45:10 | 900 0.25 unif 00 even
2023-04-08 09:50:39 | 900 0.25 unif 01 all
2023-04-08 09:58:14 | 900 0.25 unif 01 even
2023-04-08 10:05:28 | 900 0.25 unif 10 all
2023-04-08 10:13:13 | 900 0.25 unif 10 even
2023-04-08 10:19:46 | 900 0.25 unif 11 all
2023-04-08 10:27:36 | 900 0.25 unif 11 even
2023-04-08 10:34:22 | 900 0.25 binom 00 all
2023-04-08 10:40:36 | 900 0.25 binom 00 even
2023-04-08 10:46:00 | 900 0.25 binom 01 all
2023-04-08 10:53:37 | 900 0.25 binom 01 even
2023-04-08 11:00:53 | 900 0.25 binom 10 all
2023-04-08 11:08:41 | 900 0.25 binom 10 even
2023-04-08 11:15:14 | 900 0.25 binom 11 all
2023-04-08 11:23:07 | 900 0.25 binom 11 even
2023-04-08 11:29:49 | 900 0.5 unif 00 all
2023-04-08 11:36:06 | 900 0.5 unif 00 even
2023-04-08 11:41:32 | 900 0.5 unif 01 all
2023-04-08 11:49:10 | 900 0.5 unif 01 even
2023-04-08 11:56:21 | 900 0.5 unif 10 all
2023-04-08 12:04:09 | 900 0.5 unif 10 even
2023-04-08 12:10:40 | 900 0.5 unif 11 all
2023-04-08 12:18:34 | 900 0.5 unif 11 even
2023-04-08 12:25:13 | 900 0.5 binom 00 all
2023-04-08 12:31:24 | 900 0.5 binom 00 even
2023-04-08 12:36:54 | 900 0.5 binom 01 all
2023-04-08 12:44:29 | 900 0.5 binom 01 even
2023-04-08 12:51:44 | 900 0.5 binom 10 all
2023-04-08 12:59:29 | 900 0.5 binom 10 even
2023-04-08 13:06:04 | 900 0.5 binom 11 all
2023-04-08 13:13:53 | 900 0.5 binom 11 even
2023-04-08 13:20:35 | 900 0.75 unif 00 all
2023-04-08 13:26:46 | 900 0.75 unif 00 even
2023-04-08 13:32:13 | 900 0.75 unif 01 all
2023-04-08 13:39:49 | 900 0.75 unif 01 even
2023-04-08 13:47:01 | 900 0.75 unif 10 all
2023-04-08 13:54:47 | 900 0.75 unif 10 even
2023-04-08 14:01:19 | 900 0.75 unif 11 all
2023-04-08 14:09:13 | 900 0.75 unif 11 even
2023-04-08 14:15:51 | 900 0.75 binom 00 all
2023-04-08 14:22:05 | 900 0.75 binom 00 even
2023-04-08 14:27:30 | 900 0.75 binom 01 all
2023-04-08 14:35:08 | 900 0.75 binom 01 even
2023-04-08 14:42:23 | 900 0.75 binom 10 all
2023-04-08 14:50:11 | 900 0.75 binom 10 even
2023-04-08 14:56:42 | 900 0.75 binom 11 all
2023-04-08 15:04:39 | 900 0.75 binom 11 even
2023-04-08 15:11:15 | 900 0.95 unif 00 all
2023-04-08 15:17:28 | 900 0.95 unif 00 even
2023-04-08 15:22:54 | 900 0.95 unif 01 all
2023-04-08 15:30:30 | 900 0.95 unif 01 even
2023-04-08 15:37:58 | 900 0.95 unif 10 all
2023-04-08 15:45:43 | 900 0.95 unif 10 even
2023-04-08 15:52:18 | 900 0.95 unif 11 all
2023-04-08 16:00:19 | 900 0.95 unif 11 even
2023-04-08 16:07:07 | 900 0.95 binom 00 all
2023-04-08 16:13:19 | 900 0.95 binom 00 even
2023-04-08 16:18:47 | 900 0.95 binom 01 all
2023-04-08 16:26:21 | 900 0.95 binom 01 even
2023-04-08 16:33:50 | 900 0.95 binom 10 all
2023-04-08 16:41:34 | 900 0.95 binom 10 even
2023-04-08 16:48:09 | 900 0.95 binom 11 all
2023-04-08 16:55:57 | 900 0.95 binom 11 even
There were 50 or more warnings (use warnings() to see the first 50)
[1] "2023-04-08 17:02:44 EDT"
> warns = warnings() # save warnings
> print(warns)
Warning messages:
1: closing unused connection 3 (localhost)
2: In cor(v, mu) : the standard deviation is zero
3: In cor(v, mu) : the standard deviation is zero
4: In cor(v, mu) : the standard deviation is zero
5: In cor(v, mu) : the standard deviation is zero
6: In cor(v, mu) : the standard deviation is zero
7: In cor(v, mu) : the standard deviation is zero
8: In cor(v, mu) : the standard deviation is zero
9: In cor(v, mu) : the standard deviation is zero
10: In cor(v, mu) : the standard deviation is zero
11: In cor(v, mu) : the standard deviation is zero
12: In cor(v, mu) : the standard deviation is zero
13: In cor(v, mu) : the standard deviation is zero
14: In cor(v, mu) : the standard deviation is zero
15: In cor(v, mu) : the standard deviation is zero
16: In cor(v, mu) : the standard deviation is zero
17: In cor(v, mu) : the standard deviation is zero
18: In cor(v, mu) : the standard deviation is zero
19: In cor(v, mu) : the standard deviation is zero
20: In cor(v, mu) : the standard deviation is zero
21: In cor(v, mu) : the standard deviation is zero
22: In cor(v, mu) : the standard deviation is zero
23: In cor(v, mu) : the standard deviation is zero
24: In cor(v, mu) : the standard deviation is zero
25: In cor(v, mu) : the standard deviation is zero
26: In cor(v, mu) : the standard deviation is zero
27: In cor(v, mu) : the standard deviation is zero
28: In cor(v, mu) : the standard deviation is zero
29: In cor(v, mu) : the standard deviation is zero
30: In cor(v, mu) : the standard deviation is zero
31: In cor(v, mu) : the standard deviation is zero
32: In cor(v, mu) : the standard deviation is zero
33: In cor(v, mu) : the standard deviation is zero
34: In cor(v, mu) : the standard deviation is zero
35: In cor(v, mu) : the standard deviation is zero
36: In cor(v, mu) : the standard deviation is zero
37: In cor(v, mu) : the standard deviation is zero
38: In cor(v, mu) : the standard deviation is zero
39: In cor(v, mu) : the standard deviation is zero
40: In cor(v, mu) : the standard deviation is zero
41: In cor(v, mu) : the standard deviation is zero
42: In cor(v, mu) : the standard deviation is zero
43: In cor(v, mu) : the standard deviation is zero
44: In cor(v, mu) : the standard deviation is zero
45: In cor(v, mu) : the standard deviation is zero
46: In cor(v, mu) : the standard deviation is zero
47: In cor(v, mu) : the standard deviation is zero
48: In cor(v, mu) : the standard deviation is zero
49: In cor(v, mu) : the standard deviation is zero
50: In cor(v, mu) : the standard deviation is zero
> 
> # summarize cells
> simtab = do.call(rbind,lapply(simresu,summarizecell))
> 
> # end session
> save.image("badrespunsuperv-20230408.RData")
> devtools::session_info()
- Session info ---------------------------------------------------------------
 setting  value                       
 version  R version 4.0.3 (2020-10-10)
 os       Windows 10 x64              
 system   x86_64, mingw32             
 ui       RTerm                       
 language (EN)                        
 collate  English_Canada.1252         
 ctype    English_Canada.1252         
 tz       America/New_York            
 date     2023-04-08                  

- Packages -------------------------------------------------------------------
 package     * version date       lib source        
 cachem        1.0.5   2021-05-15 [1] CRAN (R 4.0.5)
 callr         3.7.0   2021-04-20 [1] CRAN (R 4.0.5)
 cli           3.1.0   2021-10-27 [1] CRAN (R 4.0.5)
 codetools     0.2-16  2018-12-24 [2] CRAN (R 4.0.3)
 crayon        1.4.1   2021-02-08 [1] CRAN (R 4.0.5)
 desc          1.3.0   2021-03-05 [1] CRAN (R 4.0.5)
 devtools      2.4.2   2021-06-07 [1] CRAN (R 4.0.3)
 digest        0.6.27  2020-10-24 [1] CRAN (R 4.0.5)
 ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.0.5)
 fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.0.5)
 fs            1.5.0   2020-07-31 [1] CRAN (R 4.0.5)
 furrr       * 0.2.2   2021-01-29 [1] CRAN (R 4.0.5)
 future      * 1.21.0  2020-12-10 [1] CRAN (R 4.0.5)
 globals       0.14.0  2020-11-22 [1] CRAN (R 4.0.3)
 glue          1.4.2   2020-08-27 [1] CRAN (R 4.0.5)
 lifecycle     1.0.0   2021-02-15 [1] CRAN (R 4.0.5)
 listenv       0.8.0   2019-12-05 [1] CRAN (R 4.0.5)
 magrittr      2.0.1   2020-11-17 [1] CRAN (R 4.0.5)
 memoise       2.0.0   2021-01-26 [1] CRAN (R 4.0.5)
 parallelly    1.26.0  2021-06-09 [1] CRAN (R 4.0.5)
 pkgbuild      1.2.0   2020-12-15 [1] CRAN (R 4.0.5)
 pkgload       1.2.1   2021-04-06 [1] CRAN (R 4.0.5)
 prettyunits   1.1.1   2020-01-24 [1] CRAN (R 4.0.5)
 processx      3.5.2   2021-04-30 [1] CRAN (R 4.0.5)
 ps            1.6.0   2021-02-28 [1] CRAN (R 4.0.5)
 purrr         0.3.4   2020-04-17 [1] CRAN (R 4.0.5)
 R6            2.5.0   2020-10-28 [1] CRAN (R 4.0.5)
 remotes       2.4.0   2021-06-02 [1] CRAN (R 4.0.5)
 rlang         0.4.11  2021-04-30 [1] CRAN (R 4.0.5)
 rprojroot     2.0.2   2020-11-15 [1] CRAN (R 4.0.5)
 rstudioapi    0.13    2020-11-12 [1] CRAN (R 4.0.5)
 sessioninfo   1.1.1   2018-11-05 [1] CRAN (R 4.0.5)
 testthat      3.0.3   2021-06-16 [1] CRAN (R 4.0.5)
 usethis       2.0.1   2021-02-10 [1] CRAN (R 4.0.5)
 vctrs         0.3.8   2021-04-29 [1] CRAN (R 4.0.5)
 withr         2.4.2   2021-04-18 [1] CRAN (R 4.0.5)

[1] C:/Users/Michael Ilagan/Documents/R/win-library/4.0
[2] C:/Program Files/R/R-4.0.3/library
> 
> proc.time()
    user   system  elapsed 
  242.67    17.57 47642.29 
